<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:PaymentMethod.kt$PaymentMethod.Card$override fun toParamMap(): Map&lt;String, Any></ID>
    <ID>ComplexMethod:TrackerRequest.kt$TrackerRequest$override fun toParamMap(): Map&lt;String, Any></ID>
    <ID>ConstructorParameterNaming:WeChat.kt$WeChat$val `package`: String?</ID>
    <ID>EmptyCatchBlock:AirwallexJsonUtils.kt$AirwallexJsonUtils${ }</ID>
    <ID>LargeClass:Airwallex.kt$Airwallex</ID>
    <ID>LongMethod:AirwallexPaymentManager.kt$AirwallexPaymentManager$@Suppress("UNCHECKED_CAST") private suspend fun &lt;T> execute(options: Options, listener: PaymentListener&lt;T>)</ID>
    <ID>LongMethod:PaymentIntentParser.kt$PaymentIntentParser$override fun parse(json: JSONObject): PaymentIntent</ID>
    <ID>LongMethod:PaymentIntentTest.kt$PaymentIntentTest$@Test fun builderConstructor()</ID>
    <ID>LongMethod:PaymentMethod.kt$PaymentMethod.Card$override fun toParamMap(): Map&lt;String, Any></ID>
    <ID>LongMethod:TrackerRequest.kt$TrackerRequest$override fun toParamMap(): Map&lt;String, Any></ID>
    <ID>LongParameterList:ActionComponent.kt$ActionComponent$( paymentIntentId: String, nextAction: NextAction?, activity: Activity, applicationContext: Context, cardNextActionModel: CardNextActionModel?, listener: Airwallex.PaymentResultListener )</ID>
    <ID>LongParameterList:Airwallex.kt$Airwallex$( clientSecret: String, customerId: String, paymentMethod: PaymentMethod, nextTriggeredBy: PaymentConsent.NextTriggeredBy = PaymentConsent.NextTriggeredBy.MERCHANT, requiresCvc: Boolean, merchantTriggerReason: PaymentConsent.MerchantTriggerReason = PaymentConsent.MerchantTriggerReason.UNSCHEDULED, listener: PaymentListener&lt;PaymentConsent> )</ID>
    <ID>LongParameterList:Airwallex.kt$Airwallex$( paymentConsent: PaymentConsent, currency: String, amount: BigDecimal? = null, cvc: String? = null, returnUrl: String? = null, listener: PaymentResultListener )</ID>
    <ID>LongParameterList:Airwallex.kt$Airwallex$( paymentIntentId: String, clientSecret: String, additionalInfo: Map&lt;String, String>, billing: Billing?, autoCapture: Boolean, listener: PaymentResultListener )</ID>
    <ID>LongParameterList:Airwallex.kt$Airwallex$( paymentIntentId: String, clientSecret: String, paymentMethod: PaymentMethod, cvc: String? = null, currency: String? = null, customerId: String? = null, paymentConsentId: String? = null, additionalInfo: Map&lt;String, String>? = null, returnUrl: String? = null, autoCapture: Boolean = true, flow: AirwallexPaymentRequestFlow? = null, listener: PaymentResultListener )</ID>
    <ID>LongParameterList:Airwallex.kt$Airwallex$( session: AirwallexSession, paymentMethod: PaymentMethod, paymentConsentId: String? = null, cvc: String? = null, additionalInfo: Map&lt;String, String>? = null, flow: AirwallexPaymentRequestFlow? = null, listener: PaymentResultListener )</ID>
    <ID>LongParameterList:AirwallexApiRepository.kt$AirwallexApiRepository.Companion$( baseUrl: String, pageNum: Int?, pageSize: Int?, active: Boolean?, transactionCurrency: String?, transactionMode: TransactionMode?, countryCode: String? )</ID>
    <ID>LongParameterList:AirwallexApiRepository.kt$AirwallexApiRepository.RetrieveAvailablePaymentMethodsOptions$( override val clientSecret: String, /** * Page number starting from 0 */ internal val pageNum: Int, /** * Number of payment methods to be listed per page */ internal val pageSize: Int, /** * Indicate whether the payment method type is active */ internal val active: Boolean?, /** * The supported transaction currency */ internal val transactionCurrency: String?, /** * The supported transaction mode. One of oneoff, recurring. */ internal val transactionMode: TransactionMode?, /** * The supported country code */ internal val countryCode: String? )</ID>
    <ID>LongParameterList:CardNextActionModel.kt$CardNextActionModel$( val fragment: Fragment?, val activity: Activity, val paymentManager: PaymentManager, val clientSecret: String, val device: Device?, val paymentIntentId: String, val currency: String, val amount: BigDecimal, )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentIntentId: String, clientSecret: String, paymentMethod: PaymentMethod, cvc: String?, customerId: String? = null, paymentConsentId: String? = null, returnUrl: String? = null, autoCapture: Boolean = true )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodType: String, paymentIntentId: String, clientSecret: String, customerId: String? = null, paymentConsentId: String? = null, currency: String? = null, countryCode: String? = null, additionalInfo: Map&lt;String, String>? = null, returnUrl: String? = null, flow: AirwallexPaymentRequestFlow? = null )</ID>
    <ID>LongParameterList:CreatePaymentConsentParams.kt$CreatePaymentConsentParams.Companion$( clientSecret: String, customerId: String, paymentMethodId: String, nextTriggeredBy: PaymentConsent.NextTriggeredBy, merchantTriggerReason: PaymentConsent.MerchantTriggerReason, requiresCvc: Boolean )</ID>
    <ID>LongParameterList:VerifyPaymentConsentParams.kt$VerifyPaymentConsentParams.Companion$( clientSecret: String, paymentConsentId: String, amount: BigDecimal?, currency: String?, cvc: String?, returnUrl: String? )</ID>
    <ID>MandatoryBracesIfStatements:Airwallex.kt$Airwallex.&lt;no name provided>.&lt;no name provided>$AirwallexPlugins.environment.threeDsReturnUrl()</ID>
    <ID>MandatoryBracesIfStatements:Logger.kt$Logger$logWorker.log( Level.DEBUG, tag, message, throwable )</ID>
    <ID>MandatoryBracesIfStatements:Logger.kt$Logger$logWorker.log( Level.ERROR, tag, message, throwable )</ID>
    <ID>MandatoryBracesIfStatements:Logger.kt$Logger$logWorker.log( Level.INFO, tag, message, throwable )</ID>
    <ID>MandatoryBracesIfStatements:Logger.kt$Logger$logWorker.log( Level.VERBOSE, tag, message, throwable )</ID>
    <ID>MandatoryBracesIfStatements:Logger.kt$Logger$logWorker.log( Level.WARNING, tag, message, throwable )</ID>
    <ID>NotNullAssertionOperatorRule:NextActionTest.kt$NextActionTest$NextActionFixtures.NEXTACTION!!</ID>
    <ID>NotNullAssertionOperatorRule:PaymentConsentCreateRequestTest.kt$PaymentConsentCreateRequestTest$request.paymentMethodRequest!!</ID>
    <ID>NotNullAssertionOperatorRule:PaymentConsentVerifyRequestTest.kt$PaymentConsentVerifyRequestTest$cardRequest.verificationOptions!!</ID>
    <ID>NotNullAssertionOperatorRule:PaymentIntentConfirmRequestTest.kt$PaymentIntentConfirmRequestTest$request.device!!</ID>
    <ID>NotNullAssertionOperatorRule:PaymentMethodCreateRequestTest.kt$PaymentMethodCreateRequestTest$request.card!!</ID>
    <ID>NotNullAssertionOperatorRule:PaymentMethodReferenceTest.kt$PaymentMethodReferenceTest$PaymentMethodReferenceFixtures.PAYMENTMETHODREFERRENCE!!</ID>
    <ID>NotNullAssertionOperatorRule:ThreeDSecureTest.kt$ThreeDSecureTest$ThreeDSecureFixtures.THREEDSECURE!!</ID>
    <ID>NotNullAssertionOperatorRule:TrackerRequestTest.kt$TrackerRequestTest$trackerRequest.code!!</ID>
    <ID>ParameterListWrapping:com.airwallex.android.core.model.PaymentConsentCreateRequest.kt:123</ID>
    <ID>TooGenericExceptionThrown:AirwallexRecurringWithIntentSession.kt$AirwallexRecurringWithIntentSession.Builder$throw Exception("Customer id is required if the PaymentIntent is created for recurring payment.")</ID>
    <ID>UnnecessaryAbstractClass:AbstractPaymentIntentParams.kt$AbstractPaymentIntentParams$AbstractPaymentIntentParams</ID>
    <ID>UnnecessaryAbstractClass:AbstractPaymentMethodParams.kt$AbstractPaymentMethodParams$AbstractPaymentMethodParams</ID>
  </CurrentIssues>
</SmellBaseline>
