apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacocoVersion"
}

// Force Jacoco Version

subprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "$jacocoVersion"
                }
            }
        }
    }
}

project.afterEvaluate { project ->

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    final buildType = "debug"
    final variant = "$buildType"
    final taskName = "jacocoTest${variant.capitalize()}UnitTestReport"

    task "$taskName"(type: JacocoReport, dependsOn: "test${variant.capitalize()}UnitTest") {

        reports {
            csv.required = false
            xml.required = true
            html.required = true
        }

        final fileFilter = [
                // data binding
                '**/databinding/*',
                'android/databinding/**/*.class',
                '**/android/databinding/*Binding.class',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/BR.*',
                // android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                // kotlin
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*Companion*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                '**/*MembersInjector*.*',
                '**/*_MembersInjector.class',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
                '**/*Extensions*.*',
                // sealed and data classes
                '**/*$Result.*',
                '**/*$Result$*.*',
                // adapters generated by moshi
                '**/*JsonAdapter.*',
                // Hilt
                '**/*Module.kt',
                '**/di/**',
                'dagger.hilt.internal/*',
                'hilt_aggregated_deps/*',

                '**/*$Result.*', /* filtering `sealed` and `data` classes */
                '**/*$Result$*.*',/* filtering `sealed` and `data` classes */
                '**/*Args*.*', /* filtering Navigation Component generated classes */
                '**/*Directions*.*', /* filtering Navigation Component generated classes */

                '**/*inlined*.class', /* filtering inlined classes */

                '**/*Module_*Factory.class',
                '**/*Application.*',
                '**/*Activity.*',
                '**/*Fragment.*',
                '**/*View.*',
                '**/*MenuProvider.*',
                '**/*ViewExtensions*',
                '**/*Decoration.*',
                '**/*ViewHolder.*',
                '**/*Adapter.*',
                '**/*Listener.*',
                '**/di/**',
                '**/*Fragment+*.*',
                '**/*View+*.*',
                '**/*Presenter+*.*',
                '**/*Presenter.*',
                '**/*ViewModelFactory.*',
                '**/RuntimeTypeAdapterFactory.*',
                '**/*BuilderProvider.*',
                '**/composables/**',
                '**/BuildHelper.*',
                '**/BuildConfigHelper.*',

                '**/*ViewModelFactory.*',
                '**/*ScreenEvent.*',
                '**/core/Airwallex.kt',
                '**/card/AirwallexSecurityConnector.kt',
                '**/AirwallexStarter.kt',
                '**/*InputLayout.kt',
                '**/*EditText.kt',
                '**/view/CardWidget.kt',
                '**/paymentacceptance/**',
                'security-3ds/**'
        ]

        final androidKotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${variant}", excludes: fileFilter)
        final kotlinTree = fileTree(dir: "${project.buildDir}/classes/kotlin/main", excludes: fileFilter)
        final javacTree = fileTree(dir: "${project.buildDir}/intermediates/javac/${variant}/classes", excludes: fileFilter)

        final mainSrc = "${project.projectDir}/src/main/java"
        final buildTypeSrc = "${project.projectDir}/src/${buildType}/java"

        sourceDirectories.setFrom files([mainSrc, buildTypeSrc])
        classDirectories.setFrom files([androidKotlinTree, kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: project.buildDir, includes: [
                "jacoco/test${variant.capitalize()}UnitTest.exec",
                "outputs/unit_test_code_coverage/${variant}UnitTest/test${variant.capitalize()}UnitTest.exec"
        ])
    }
}