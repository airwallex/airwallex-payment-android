import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.dokka.gradle.DokkaTask

buildscript {
    ext {
        kotlinVersion = '1.8.0'
        jacocoVersion = '0.8.11'
        detektVersion = '1.21.0'
    }
    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.3.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:2.0.0"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "${detektVersion}"
    id "nl.neotech.plugin.rootcoverage" version "1.5.3"
    id "org.sonarqube" version "4.4.1.3373"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "org.jetbrains.dokka" version "2.0.0"
}

tasks.withType(Detekt).configureEach {
    reports {
        html.required.set(true)
        xml.required.set(true)
        txt.required.set(true)
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url uri("${rootProject.projectDir}/build/repos/maven")
        }
    }
}


// Update the version field when a new version is released
version = '6.2.4'

ext {
    compileSdkVersion = 36
    minSdkVersion = 21

    kotlinCoroutinesVersion = '1.8.0'

    wechatPayVersion = "6.8.0"

    junitVersion = '4.13.2'
    robolectricVersion = '4.14.1'
    testCoreVersion = '1.5.0'

    versionCode = System.getenv("AIRWALLEX_VERSION_CODE") as Integer ?: 1
    versionName = version
    isLocalPublish = false
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc).tap {
            configureEach {
                options.addStringOption('Xdoclint:none', '-quiet')
                options.addStringOption('encoding', 'UTF-8')
            }
        }
    }
}

subprojects {
    configurations.configureEach {
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "$jacocoVersion"
                }
            }
        }
    }
}

// Dokka configuration for generating SDK documentation
subprojects {
    // Only apply Dokka to SDK modules
    if (project.name in ['airwallex', 'card', 'wechat', 'redirect', 'googlepay', 'components-core', 'security-3ds', 'ui-core']) {
        apply plugin: 'org.jetbrains.dokka'

        tasks.withType(DokkaTask.class).configureEach {
            moduleName.set(project.name)
            moduleVersion.set(rootProject.version.toString())

            dokkaSourceSets {
                main {
                    // Include only public API
                    includeNonPublic.set(false)

                    // Specify source directories
                    sourceRoots.from(file("src/main/java"))

                    // Source links configuration
                    sourceLink {
                        localDirectory.set(file("src/main/java"))
                        remoteUrl.set(new URL("https://github.com/airwallex/airwallex-payment-android/tree/main/${project.name}/src/main/java"))
                        remoteLineSuffix.set("#L")
                    }
                }
            }
        }
    }
}

// Task to generate documentation for all SDK modules
tasks.register('generateSDKDocs') {
    description = 'Generate documentation for all Airwallex Payment SDK modules'
    group = 'documentation'

    def sdkModules = ['airwallex', 'card', 'wechat', 'redirect', 'googlepay', 'components-core', 'security-3ds', 'ui-core']

    dependsOn(sdkModules.collect { ":${it}:dokkaGenerateModuleHtml" })

    doLast {
        println "Documentation generated for all SDK modules:"
        sdkModules.each { module ->
            def docPath = "${module}/build/dokka-module/html/"
            if (file(docPath).exists()) {
                println "  - ${module}: ${docPath}"
            }
        }
        println "\nTo view the documentation, open the index.html files in each module's build/dokka-module/html/ directory"
    }
}

// Root-level Dokka configuration for unified multi-module documentation
tasks.withType(DokkaTask.class).configureEach {
    moduleName.set("Airwallex Payment Android SDK")
    moduleVersion.set(version.toString())

    dokkaSourceSets {
        main {
            // Include only public API
            includeNonPublic.set(false)

            // Add root documentation
            if (file("README.md").exists()) {
                includes.from("README.md")
            }

            // External documentation links
            externalDocumentationLink {
                url.set(new URL("https://developer.android.com/reference/kotlin/"))
                packageListUrl.set(new URL("https://developer.android.com/reference/kotlin/package-list"))
            }

            externalDocumentationLink {
                url.set(new URL("https://kotlinlang.org/api/latest/jvm/stdlib/"))
                packageListUrl.set(new URL("https://kotlinlang.org/api/latest/jvm/stdlib/package-list"))
            }
        }
    }
}

dependencies {
    dokka(project(':airwallex'))
    dokka(project(':card'))
    dokka(project(':wechat'))
    dokka(project(':redirect'))
    dokka(project(':googlepay'))
    dokka(project(':components-core'))
    dokka(project(':security-3ds'))
    dokka(project(':ui-core'))
}

apply from: "${rootDir}/sonar.gradle"
apply from: "${rootDir}/gradle/scripts/publish-root.gradle"
